//
// WebSocketServer.cpp
//
// This sample demonstrates the WebSocket class.
//
// Copyright (c) 2012, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// SPDX-License-Identifier:	BSL-1.0
//


#include "Poco/Net/HTTPServer.h"
#include "Poco/Net/HTTPRequestHandler.h"
#include "Poco/Net/HTTPRequestHandlerFactory.h"
#include "Poco/Net/HTTPServerParams.h"
#include "Poco/Net/HTTPServerRequest.h"
#include "Poco/Net/HTTPServerResponse.h"
#include "Poco/Net/HTTPServerParams.h"
#include "Poco/Net/ServerSocket.h"
#include "Poco/Net/WebSocket.h"
#include "Poco/Net/NetException.h"
#include "Poco/Util/ServerApplication.h"
#include "Poco/Util/Option.h"
#include "Poco/Util/OptionSet.h"
#include "Poco/Util/HelpFormatter.h"
#include "Poco/Format.h"
#include <iostream>


//json
#include <stdint.h>
#include <sstream>
#include "Poco/JSON/Parser.h"
#include "Poco/JSON/ParseHandler.h"
#include "Poco/JSON/JSONException.h"
#include "Poco/StreamCopier.h"
#include "Poco/Dynamic/Var.h"
#include "Poco/JSON/Query.h"
#include "Poco/JSON/PrintHandler.h"

//json
using namespace Poco::Dynamic;
using namespace Poco;
using std::string;


using Poco::Net::ServerSocket;
using Poco::Net::WebSocket;
using Poco::Net::WebSocketException;
using Poco::Net::HTTPRequestHandler;
using Poco::Net::HTTPRequestHandlerFactory;
using Poco::Net::HTTPServer;
using Poco::Net::HTTPServerRequest;
using Poco::Net::HTTPResponse;
using Poco::Net::HTTPServerResponse;
using Poco::Net::HTTPServerParams;
using Poco::Timestamp;
using Poco::ThreadPool;
using Poco::Util::ServerApplication;
using Poco::Util::Application;
using Poco::Util::Option;
using Poco::Util::OptionSet;
using Poco::Util::HelpFormatter;


//json
//json
void JsonGet()
{
	string jsonString = "{ \"name\" : \"yuhaiyang\" }";
	JSON::Parser parser;
	Dynamic::Var result;
	parser.reset();

	result = parser.parse(jsonString);
	JSON::Object::Ptr pObj = result.extract<JSON::Object::Ptr>();
	Dynamic::Var ret = pObj->get("name1");
	if (ret.isEmpty())
	{
		std::cout << "is null" << std::endl;
	}
	else
	{
		std::cout << ret.toString() << std::endl;
	}
}

//在　json 里加入数组。
std::string JsonArry(void)
{
	JSON::Object jsnObj;
	JSON::Array jsnArry;
	JSON::Object subObj1;
	JSON::Object subObj2;

	jsnObj.set("command", "createuser");

	subObj1.set("name", "yuhaiyang");
	subObj1.set("pass", "123");

	subObj2.set("name", "cj");
	subObj2.set("pass", "456");

	jsnArry.add(subObj1);
	jsnArry.add(subObj2);

	jsnObj.set("userinfo", jsnArry);

	std::stringstream  jsnString;
	jsnObj.stringify(jsnString, 3);
	//    std::cout << jsnString.str() << std::endl;
	return jsnString.str();

}


//解析数据
void JsonGetArry(void)
{
	/*-------------------构造包含Array的JSON（string类型）--------------------------------*/
	JSON::Object jsnObj;
	JSON::Array jsnArry;
	JSON::Object subObj1;
	JSON::Object subObj2;

	jsnObj.set("command", "createuser");

	subObj1.set("name", "yuhaiyang");
	subObj1.set("pass", "123");

	subObj2.set("name", "cj");
	subObj2.set("pass", "456");

	jsnArry.add(subObj1);
	jsnArry.add(subObj2);

	jsnObj.set("userinfo", jsnArry);

	std::stringstream  jsnOstream;
	jsnObj.stringify(jsnOstream, 3);

	string jsnStr = jsnOstream.str();

	std::cout << "原数据:\n" << jsnStr << "\n\n\n" << std::endl;


	//--------------------------解析数组-----------------------------
	JSON::Parser parse;
	Dynamic::Var json = parse.parse(jsnStr);
	JSON::Object::Ptr pObj = json.extract<JSON::Object::Ptr>();
	JSON::Array::Ptr pArry = pObj->getArray("userinfo");

	JSON::Array::ConstIterator it = pArry->begin();
	//把数组里的所有内容打印出来
	//当然也可以把每个对象拿出来用。
	for (; it != pArry->end(); it++)
	{
		std::cout << it->toString() << std::endl;
	}

}




//用于处理网页的请求
class PageRequestHandler : public HTTPRequestHandler
	/// Return a HTML document with some JavaScript creating
	/// a WebSocket connection.
{
public:
	void handleRequest(HTTPServerRequest& request, HTTPServerResponse& response)
	{

		        response.setChunkedTransferEncoding(true);
		        response.setContentType("text/html");
		        std::ostream& ostr = response.send();

		        ostr << "<html>";
		        ostr << "<head>";
		        ostr << "<title>WebSocketServer</title>";
		        ostr << "<script type=\"text/javascript\">";
		        ostr << "function WebSocketTest()";
		        ostr << "{";
		        ostr << "  if (\"WebSocket\" in window)";
		        ostr << "  {";
		        ostr << "    var ws = new WebSocket(\"ws://" << request.serverAddress().toString() << "/ws\");";
		        ostr << "    ws.onopen = function()";
		        ostr << "      {";
		        ostr << "        ws.send(\"Hello, world!\");";
		        ostr << "      };";
		        ostr << "    ws.onmessage = function(evt)";
		        ostr << "      { ";
		        ostr << "        var msg = evt.data;";
		        ostr << "        alert(\"Message received: \" + msg);";
		//        ostr << "        ws.close();";
		        ostr << "      };";
		        ostr << "    ws.onclose = function()";
		        ostr << "      { ";
		        ostr << "        alert(\"WebSocket closed.\");";
		        ostr << "      };";
		        ostr << "  }";
		        ostr << "  else";
		        ostr << "  {";
		        ostr << "     alert(\"This browser does not support WebSockets.\");";
		        ostr << "  }";
		        ostr << "}";
		        ostr << "</script>";
		        ostr << "</head>";
		        ostr << "<body>";
		        ostr << "  <h1>WebSocket Server</h1>";
		        ostr << "  <p><a href=\"javascript:WebSocketTest()\">Run WebSocket Script</a></p>";
		        ostr << "</body>";
		        ostr << "</html>";
	}
};


class WebSocketRequestHandler : public HTTPRequestHandler
	/// Handle a WebSocket connection.
{
public:
	void handleRequest(HTTPServerRequest& request, HTTPServerResponse& response)
	{
		Application& app = Application::instance();
		try
		{
			WebSocket ws(request, response);
			app.logger().information("WebSocket connection established.");
			char buffer[1024];
			int flags;
			int n;
			do
			{

				n = ws.receiveFrame(buffer, sizeof(buffer), flags);
				buffer[n] = '\0';
				//                app.logger().information(Poco::format("Frame received (length=%d, flags=0x%x).", n, unsigned(flags)));
				std::cout << std::endl;
				std::cout << "Recive: " << buffer << std::endl;
				//发送消息更改
				std::string replay;
				//                replay="I love you";
				replay = JsonArry();

				ws.sendFrame(replay.data(), (int)replay.size(), WebSocket::FRAME_TEXT);
			} while (n > 0 && (flags & WebSocket::FRAME_OP_BITMASK) != WebSocket::FRAME_OP_CLOSE);
			app.logger().information("WebSocket connection closed.");
		}
		catch (WebSocketException& exc)
		{
			app.logger().log(exc);
			switch (exc.code())
			{
			case WebSocket::WS_ERR_HANDSHAKE_UNSUPPORTED_VERSION:
				response.set("Sec-WebSocket-Version", WebSocket::WEBSOCKET_VERSION);
				// fallthrough
			case WebSocket::WS_ERR_NO_HANDSHAKE:
			case WebSocket::WS_ERR_HANDSHAKE_NO_VERSION:
			case WebSocket::WS_ERR_HANDSHAKE_NO_KEY:
				response.setStatusAndReason(HTTPResponse::HTTP_BAD_REQUEST);
				response.setContentLength(0);
				response.send();
				break;
			}
		}
	}
};


class RequestHandlerFactory : public HTTPRequestHandlerFactory
{
public:
	HTTPRequestHandler* createRequestHandler(const HTTPServerRequest& request)
	{
		Application& app = Application::instance();
		app.logger().information("Request from "
			+ request.clientAddress().toString()
			+ ": "
			+ request.getMethod()
			+ " "
			+ request.getURI()
			+ " "
			+ request.getVersion());

		for (HTTPServerRequest::ConstIterator it = request.begin(); it != request.end(); ++it)
		{
			app.logger().information(it->first + ": " + it->second);
		}

		if (request.find("Upgrade") != request.end() && Poco::icompare(request["Upgrade"], "websocket") == 0)
			return new WebSocketRequestHandler;
		else
			return new PageRequestHandler;
	}
};


class WebSocketServer : public Poco::Util::ServerApplication
	/// The main application class.
	///
	/// This class handles command-line arguments and
	/// configuration files.
	/// Start the WebSocketServer executable with the help
	/// option (/help on Windows, --help on Unix) for
	/// the available command line options.
	///
	/// To use the sample configuration file (WebSocketServer.properties),
	/// copy the file to the directory where the WebSocketServer executable
	/// resides. If you start the debug version of the WebSocketServer
	/// (WebSocketServerd[.exe]), you must also create a copy of the configuration
	/// file named WebSocketServerd.properties. In the configuration file, you
	/// can specify the port on which the server is listening (default
	/// 9980) and the format of the date/time string sent back to the client.
	///
	/// To test the WebSocketServer you can use any web browser (http://localhost:9980/).
{
public:
	WebSocketServer() : _helpRequested(false)
	{
	}

	~WebSocketServer()
	{
	}

protected:
	void initialize(Application& self)
	{
		loadConfiguration(); // load default configuration files, if present
		ServerApplication::initialize(self);
	}

	void uninitialize()
	{
		ServerApplication::uninitialize();
	}

	void defineOptions(OptionSet& options)
	{
		ServerApplication::defineOptions(options);

		options.addOption(
			Option("help", "h", "display help information on command line arguments")
			.required(false)
			.repeatable(false));
	}

	//参数的处理
	void handleOption(const std::string& name, const std::string& value)
	{
		ServerApplication::handleOption(name, value);

		if (name == "help")
			_helpRequested = true;
	}

	void displayHelp()
	{
		HelpFormatter helpFormatter(options());
		helpFormatter.setCommand(commandName());
		helpFormatter.setUsage("OPTIONS");
		helpFormatter.setHeader("A sample HTTP server supporting the WebSocket protocol.");
		helpFormatter.format(std::cout);
	}

	int main(const std::vector<std::string>& args)
	{
		if (_helpRequested)
		{
			displayHelp();
		}
		else
		{
			// get parameters from configuration file
			unsigned short port = (unsigned short)config().getInt("WebSocketServer.port", 8080);

			// set-up a server socket
			ServerSocket svs(port);
			// set-up a HTTPServer instance
			HTTPServer srv(new RequestHandlerFactory, svs, new HTTPServerParams);
			// start the HTTPServer
			srv.start();
			// wait for CTRL-C or kill
			waitForTerminationRequest();
			// Stop the HTTPServer
			srv.stop();
		}
		return Application::EXIT_OK;
	}

private:
	bool _helpRequested;
};





//相当于main函数 程序运行的入口
//POCO_SERVER_MAIN(WebSocketServer)
int main(int argc, char **argv)
{
	WebSocketServer app;
	//
	return app.run(argc, argv);
	//json test
	//    JsonGet();
	//    JsonArry();
	//    JsonGetArry();
	//    

	return 0;
}



